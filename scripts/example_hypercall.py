import os
import sys
import struct
import argparse
from ctypes import *
from vmstate import *

class HV_HYPERCALL_INPUT_PRIVATE(Structure):
    _fields_ = [('CallCode', c_uint64, 14),
                ('IsIsolated', c_uint64, 1),
                ('IsExtended', c_uint64, 1),
                ('IsFast', c_uint64, 1),
                ('VariableHeaderSize', c_uint64, 9),
                ('Reserved1', c_uint64, 5),
                ('IsNested', c_uint64, 1),
                ('CountOfElements', c_uint64, 12),
                ('Reserved2', c_uint64, 4),
                ('RepStartIndex', c_uint64, 12),
                ('Reserved3', c_uint64, 4)]

assert sizeof(HV_HYPERCALL_INPUT_PRIVATE) == 8

class HYPERSEED_CORPUS(Structure):
    _pack_ = 1
    _fields_ = [('CallCode', c_uint32),
                ('VariableHeaderSizeInBytes', c_uint32),
                ('Type', c_uint8),
                ('Abi', c_uint8),
                ('CountOfElements', c_uint64),
                ('InputSize', c_uint64)]

assert sizeof(HYPERSEED_CORPUS) == 26

def generate_seeds(seedfile):
    states = []
    while True:
        # get one hypercall payload from the seedfile
        buf = seedfile.read(sizeof(HYPERSEED_CORPUS))
        if len(buf) != sizeof(HYPERSEED_CORPUS):
            assert not buf
            break
        corpus = HYPERSEED_CORPUS.from_buffer(bytearray(buf))
        control = HV_HYPERCALL_INPUT_PRIVATE()
        control.CallCode = corpus.CallCode
        control.VariableHeaderSize = (corpus.VariableHeaderSizeInBytes + 7) >> 3
        control.CountOfElements = corpus.CountOfElements
        rawinput = seedfile.read(corpus.InputSize)
        assert len(rawinput) == corpus.InputSize
        assert len(rawinput) <= 0x1000
        # initialize the VM state
        state = VMState(0x86)
        state.setup_gdt()
        # inject vmcall + int3
        code = '\x0f\x01\xc1' + '\xcc'
        state.regs.rip.value = state.memory.allocate(len(code))
        state.memory.write(state.regs.rip.value, code)
        # setup vmcall parameters
        state.regs.rax.value, state.regs.rdx.value = struct.unpack('<II', buffer(control))
        addr = state.memory.allocate(0, 8)
        if len(rawinput) + (addr & 0xfff) > 0x1000:
            addr = state.memory.allocate(len(rawinput), 0x1000)
        else:
            addr = state.memory.allocate(len(rawinput), 8)
        assert addr < 0xffffffff
        state.memory.write(addr, rawinput)
        # make input/output GPA point to the same address
        state.regs.rcx.value = addr
        state.regs.rsi.value = addr
        # save the state
        states.append(state)
    return states

if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('-i', required = True, type = argparse.FileType('rb'), metavar = '/path/to/seed.bin', help = 'Input generated by hyperseed.exe')
    parser.add_argument('-o', type = str, dest = 'path', required = True, metavar = '/path/to/save/folder', help = 'Where to save the seeds')
    args = parser.parse_args()
    # ensure an output directory is provided
    if not os.path.isdir(args.path):
        print '%s must be a directory' % args.path
        sys.exit(0)
    # generate the VM states
    states = generate_seeds(args.i)
    for i in range(len(states)):
        state = states[i]
        with open('%s/hc%06d.bin' % (args.path, i), 'wb') as f:
            f.write(state.raw())
